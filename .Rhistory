buff <- append(buff, x)
x <- step(x)
}
buff
}
#----- odp. 1.2 -----
T <- 50 # dlugosc realizacji
p <- palette(rainbow(3))
plot(Xt(T), type='s', col=p[1], ylim=c(-10,10))
for(i in 2:3) {
lines(Xt(T), type='s', col=p[i])
}
#----- odp. 1.3 -----
N <- 10000 # Ilosc realizacji
data <- matrix(nrow = N, ncol = T)
for(i in 1:N) {
data[i,] <- Xt(T)
}
apply(data, 2, mean)
#----- odp. 1.4 -----
p <- palette(rainbow(3))
plot(Xt(T), type='s', col=p[1])
for(i in 2:3) {
lines(Xt(T), type='s', col=p[i])
}
lines(apply(data, 2, mean), type = 'l', col='red', lwd=4)
#----- odp. 1.1 -----
step <- function(x = 10) {
rand <- runif(1)
if(rand <= 0.3) {
# Skok w prawo o 9
x <- x + 9
return(x)
}else{
x<-x-5
if (x < 10) {
x<-10
}
# Skok w lewo o 5
return(x)}
}
Xt <- function(t, x=10) {
# t - dlugosc realizacji
# x - wartosc poczatkowa
buff <- c()
for(i in 1:t) {
buff <- append(buff, x)
x <- step(x)
}
buff
}
#----- odp. 1.2 -----
T <- 80 # dlugosc realizacji
p <- palette(rainbow(3))
plot(Xt(T), type='s', col=p[1])
for(i in 2:3) {
lines(Xt(T), type='s', col=p[i])
}
#----- odp. 1.3 -----
N <- 10000 # Ilosc realizacji
data <- matrix(nrow = N, ncol = T)
for(i in 1:N) {
data[i,] <- Xt(T)
}
apply(data, 2, mean)
#----- odp. 1.4 -----
T<-50
p <- palette(rainbow(4))
plot(Xt(T), type='s', col=p[1])
for(i in 2:3) {
lines(Xt(T), type='s', col=p[i])
}
lines(apply(data, 2, mean), type = 'l', col='red', lwd=4)
#----- odp. 1.1 -----
step <- function(x = 10) {
rand <- runif(1)
if(rand <= 0.3) {
# Skok w prawo o 9
x <- x + 9
return(x)
}else{
x<-x-5
if (x < 10) {
x<-10
}
# Skok w lewo o 5
return(x)}
}
Xt <- function(t, x=10) {
# t - dlugosc realizacji
# x - wartosc poczatkowa
buff <- c()
for(i in 1:t) {
buff <- append(buff, x)
x <- step(x)
}
buff
}
#----- odp. 1.2 -----
T <- 80 # dlugosc realizacji
p <- palette(rainbow(3))
plot(Xt(T), type='s', col=p[1])
for(i in 2:3) {
lines(Xt(T), type='s', col=p[i])
}
#----- odp. 1.3 -----
N <- 10000 # Ilosc realizacji
data <- matrix(nrow = N, ncol = T)
for(i in 1:N) {
data[i,] <- Xt(T)
}
apply(data, 2, min)
apply(data,2, max)
#----- odp. 1.4 -----
N <- 10000 # Ilosc realizacji
data <- matrix(nrow = N, ncol = T)
for(i in 1:N) {
data[i,] <- Xt(T)
}
apply(data, 2, mean)
#----- odp. 1.5 -----
T<-50
p <- palette(rainbow(4))
plot(Xt(T), type='s', col=p[1])
for(i in 2:3) {
lines(Xt(T), type='s', col=p[i])
}
lines(apply(data, 2, mean), type = 'l', col='red', lwd=4)
#-----------------------WERSJA 5---------------------------------------------
#----- odp. 1.1 -----
step <- function(x = 0) {
rand <- runif(1)
if(x >= -10){
if(rand <= 0.9) {
# Skok w prawo o 1
x <- x - 2
return(x)
}else{
x<-x+17
return(x)}
# Skok w lewo o 3
}else{
if(rand <= 0.9) {
# Skok w prawo o 1
return(x)
}else{
x<-x+17
return(x)}
}
}
Xt <- function(t, x=0) {
# t - dlugosc realizacji
# x - wartosc poczatkowa
buff <- c()
for(i in 1:t) {
buff <- append(buff, x)
x <- step(x)
}
buff
}
#----- odp. 1.2 -----
T <- 100 # dlugosc realizacji
p <- palette(rainbow(3))
plot(Xt(T), type='s', col=p[1])
for(i in 2:3) {
lines(Xt(T), type='s', col=p[i])
}
#----- odp. 1.3 -----
N <- 10000 # Ilosc realizacji
data <- matrix(nrow = N, ncol = T)
for(i in 1:N) {
data[i,] <- Xt(T, 5)
}
apply(data, 2, min)
apply(data, 2, max)
#----- odp. 1.4 -----
MAXI<-max(apply(data, 2, max)[1:50])
p <- palette(rainbow(3))
plot(Xt(50), type='s', col=p[1], ylim=c(-13, MAXI))
for(i in 2:3) {
lines(Xt(50), type='s', col=p[i])
}
lines(apply(data, 2, max), type = 'l', col='red', lwd=4)
#-----------------------WERSJA 1---------------------------------------------
Xt <- function(n) {
# n - dlugosc realizacji procesu
buff <- c()
for(t in 1:n) {
lambda<-4
k <- t + 1
ak <- rnorm(1, 0.1*k, 0.01)
bk <- rpois(1, lambda)
x <- sin(ak*t)-0.1*bk
buff <- append(buff, x)
}
buff
}
N <- 10000 # ilosc realizacji
T <- 100 # Dlugosc realizacji
data2 <- matrix(nrow = N, ncol = T)
for(i in 1:N) {
data2[i, ] <- Xt(T)
}
data2 # 10000 realizacji
m <- apply(data2, 2, mean)
m[c(10, 50, 100)] # srednia w t=10, 50 oraz 100
#----- odp. 3.2 -----
N <- 11 # ilosc realizacji
T <- 100 # Dlugosc realizacji
sleepTime <- 0.04 # Czas pomiedzy klatkami
# GENEROWANIE DANYCH (pierwsze 11)
data3 <- matrix(nrow = N, ncol = T)
for(i in 1:N) {
data3[i, ] <- Xt(T)
}
for(j in 1:T) {
# Rysowanie
plot(data3[1,], type='s')
for(i in 2:10) {
lines(data3[i,], type='s')
}
lines(data3[11,1:j], type = 's', col='red', lwd=2)
Sys.sleep(sleepTime)
}
#-----------------------WERSJA 2---------------------------------------------
Xt <- function(n) {
# n - dlugosc realizacji procesu
buff <- c()
for(t in 1:n) {
lambda<-2
k <- t + 1
ak <- rnorm(1, 0.1*k, 0.01)
bk <- rpois(1, lambda)
x <- sin(ak*t+bk)+0.2*bk
buff <- append(buff, x)
}
buff
}
N <- 10000 # ilosc realizacji
T <- 100 # Dlugosc realizacji
data2 <- matrix(nrow = N, ncol = T)
for(i in 1:N) {
data2[i, ] <- Xt(T)
}
data2 # 10000 realizacji
m <- apply(data2, 2, mean)
m[c(1, 10, 100)] # srednia w t=10, 50 oraz 100
T <- 100 # Dlugosc realizacji
sleepTime <- 0.04 # Czas pomiedzy klatkami
N <- 10 # ilosc realizacji
# GENEROWANIE DANYCH (pierwsze 10)
data3 <- matrix(nrow = N, ncol = T)
for(i in 1:N) {
data3[i, ] <- Xt(T)
}
for(j in 1:T) {
# Rysowanie
plot(data3[1,], type='s')
for(i in 2:9) {
lines(data3[i,], type='s')
}
lines(data3[10,1:j], type = 's', col='blue', lwd=2)
Sys.sleep(sleepTime)
}
#-----------------------WERSJA 3---------------------------------------------
Xt <- function(n) {
# n - dlugosc realizacji procesu
buff <- c()
for(t in 1:n) {
lambda<-1
k <- t + 1
ak <- rnorm(1, 0.1*k, 0.01)
bk <- rpois(1, lambda)
x <- ak*t+sin(t+bk)+0.2*bk
buff <- append(buff, x)
}
buff
}
N <- 10000 # ilosc realizacji
T <- 80 # Dlugosc realizacji
data2 <- matrix(nrow = N, ncol = T)
for(i in 1:N) {
data2[i, ] <- Xt(T)
}
data2 # 10000 realizacji
m <- apply(data2, 2, mean)
m[c(4, 16, 32,64)] # srednia w t=10, 50 oraz 100
#----- odp. 3.2 -----
N <- 6# ilosc realizacji
T <- 80 # Dlugosc realizacji
sleepTime <- 0.1#Czas pomiedzy klatkami
# GENEROWANIE DANYCH (pierwsze 11)
data3 <- matrix(nrow = N, ncol = T)
for(i in 1:N) {
data3[i, ] <- Xt(T)
}
for(j in 1:T) {
# Rysowanie
plot(data3[1,], type='s')
for(i in 2:5) {
lines(data3[i,], type='s')
}
lines(data3[6,1:j], type = 's', col='green', lwd=2)
Sys.sleep(sleepTime)
}
#-----------------------WERSJA 4---------------------------------------------
Xt <- function(n) {
# n - dlugosc realizacji procesu
buff <- c()
for(t in 1:n) {
lambda<-1
k <- t + 1
ak <- rnorm(1, 0.03*k, 0.01)
bk <- rpois(1, lambda)
x <- cos(t/100+0.3*bk)-ak*t
buff <- append(buff, x)
}
buff
}
N <- 10000 # ilosc realizacji
T <- 80 # Dlugosc realizacji
data2 <- matrix(nrow = N, ncol = T)
for(i in 1:N) {
data2[i, ] <- Xt(T)
}
data2 # 10000 realizacji
m <- apply(data2, 2, mean)
m[c(1, 10, 50)] # srednia w t=10, 50 oraz 100
#----- odp. 3.2 -----
N <- 5 # ilosc realizacji
T <- 80 # Dlugosc realizacji
sleepTime <- 0.1 # Czas pomiedzy klatkami
# GENEROWANIE DANYCH (pierwsze 11)
data3 <- matrix(nrow = N, ncol = T)
for(i in 1:N) {
data3[i, ] <- Xt(T)
}
for(j in 1:T) {
# Rysowanie
plot(data3[1,], type='s')
for(i in 2:4) {
lines(data3[i,], type='s')
}
lines(data3[5,1:j], type = 's', col='red', lwd=2)
Sys.sleep(sleepTime)
}
#-----------------------WERSJA 5---------------------------------------------
Xt <- function(n) {
# n - dlugosc realizacji procesu
buff <- c()
for(t in 1:n) {
lambda<-5
k <- t + 1
ak <- rnorm(1, 0.02*k, 0.01)
bk <- rpois(1, lambda)
x <- sin(ak*t)-0.01*bk
buff <- append(buff, x)
}
buff
}
N <- 10000 # ilosc realizacji
T <- 100 # Dlugosc realizacji
data2 <- matrix(nrow = N, ncol = T)
for(i in 1:N) {
data2[i, ] <- Xt(T)
}
data2 # 10000 realizacji
m <- apply(data2, 2, mean)
m[c(10, 80, 100)] # srednia w t=10, 50 oraz 100
#----- odp. 3.2 -----
N <- 5 # ilosc realizacji
T <- 100 # Dlugosc realizacji
sleepTime <- 0.1 # Czas pomiedzy klatkami
# GENEROWANIE DANYCH (pierwsze 11)
data3 <- matrix(nrow = N, ncol = T)
for(i in 1:N) {
data3[i, ] <- Xt(T)
}
for(j in 1:T) {
# Rysowanie
plot(data3[1,], type='s')
for(i in 2:4) {
lines(data3[i,], type='s')
}
lines(data3[5,1:j], type = 's', col='red', lwd=2)
Sys.sleep(sleepTime)
}
#-----------------------WERSJA 6---------------------------------------------
Xt <- function(n) {
# n - dlugosc realizacji procesu
buff <- c()
for(t in 1:n) {
lambda<-5
k <- t + 1
ak <- rnorm(1, 0.02*k, 0.01)
bk <- rpois(1, lambda)
x <- sin(ak*t)-0.01*bk
buff <- append(buff, x)
}
buff
}
## uzywajac funkcji arima.sim
arimasim <- function(dlugosc){
return(arima.sim(n=dlugosc, model=list(ar=c(0.025,0.1,-0.05,-0.23))))
}
z11 <- arimasim(1000) # bo 10^3
z11
# ----- odp. 1.2 -----
# Ile wartosci wychodzi poza kreski (najwieksza znaczaca)
acf(z11)
pacf(z11)
# ----- odp. 1.3 -----
library(forecast)
Arima(z11, order=c(4,0,0))
real10<-arimasim(10)
real100<-arimasim(100)
real5000<-arimasim(5000)
real10000<-arimasim(10000)
real50000<-arimasim(50000)
Arima(real10,order=c(4,0,0))
Arima(real100,order=c(4,0,0))
Arima(real5000,order=c(4,0,0))
Arima(real10000,order=c(4,0,0))
Arima(real50000,order=c(4,0,0))
# rowne prawdopodobienstwo -1 i 1 dla chwili t=1
polozenie0 <- sample(c(-1,1), 1, prob=c(0.5,0.5)) ## polozenie t=1
Xt1 <- function(t)
{
wektorpolozen <<- c(polozenie0) # wszystkie kolejne polozenia (zaczyna sie od 5)
polozenie <- polozenie0 ## zmienna tymczasowa do przepisywania aktualnego polozenia (tez od 5 sie zaczyna)
if(t == 1) ## moment t=1 to polozenie poczatkowe
{
return(polozenie0)
}
if (t > 1) ## do zapisania k*dt, bo k=2,3...
{
## tutaj sa wszystkie kolejne polozenia
for (i in 2:t)
{
# ruch (0.5 w prawo, -1.5 w lewo), prawd (0.8 prawo, 0.2 lewo)
polozenie <- polozenie + sample(c(0.5,-1.5),1, prob=c(0.8,0.2))
# jesli czastka w polozeniu > 10 to przeskakuje do polozenia 0
if(polozenie > 10)
{polozenie <- 0}
# na koncu petli zapisanie kolejnego polozenia
wektorpolozen[i] <<- polozenie
}
}
return(wektorpolozen) # zwrocenie wektora
}
# 3 trajektorie - konczy sie na 50
trajektoria1<-Xt1(50)
trajektoria2<-Xt1(50)
trajektoria3<-Xt1(50)
plot(trajektoria1, type="l")
lines(trajektoria2,col="red")
lines(trajektoria3,col="green")
grid()
df_realizacje <- data.frame()
for (j in 1:10000){ # bo 10^4 realizacji
df_realizacje <- rbind(df_realizacje, Xt1(50)) # kazda realizacja jako kolejny wiersz
}
srednia<-c()
for (k in 1:50){ # bo przedzial (dt;50t)
srednia[k]<-mean(df_realizacje[,k]) # srednia dla kazdej kolumny, czyli srednie polozenie czastki w kazdym momencie
}
srednia
## sprawdzenie przykladowych srednich (tutaj dla realizacji nr 9, 28, 45)
cat(paste0("Srednia dla realizacji nr 9: ", srednia[[9]]),"\n",
paste0("Srednia dla realizacji nr 28: ", srednia[[28]]),"\n",
paste0("Srednia dla realizacji nr 45: ", srednia[[45]]))
shiny::runApp('C:/Users/mateu/OneDrive/Pulpit/dane_inz/shiny_application')
#================================= BIBLIOTEKI ===============================================================
library(ggplot2)
library(openxlsx)
library(dplyr)
library(tidyverse)
library(plotly)
library(gridExtra)
#============================== IMPORT DANYCH I WSTEPNA OBROBKA ============================================
setwd("C:/Users/mateu/OneDrive/Pulpit/dane_inz/")
Wskaznik_HDI <- read.csv(file= "INEQUALITY_ADJUSTED_HDI_PROJ.csv", sep= ",", header=TRUE)
PKB_na_mieszkanca <- read.xlsx(xlsxFile = "GDP_PER_CAPITA_PROJ.xlsx", sheet = 1, skipEmptyRows = FALSE)
Wspolczynnik_Giniego <- read.xlsx(xlsxFile = "GINI_INDEX_PROJ.xlsx", sheet = 1, skipEmptyRows = FALSE)
Smiertelnosc_niemowlat <- read.xlsx(xlsxFile = "INFANT_MORTALITY_RATE_PROJ.xlsx", sheet = 1, skipEmptyRows = FALSE)
Ogolne_szczescie <- read.xlsx(xlsxFile = "HAPPINESS_SCORE_PROJ.xlsx", sheet = 1, skipEmptyRows = FALSE)
# Dla danych "Ogolne_szczescie" jest oddzielny plik R, w którym został utworzony plik Excel - HAPPINESS_SCORE_PROJ.xlsx.
names(Wskaznik_HDI) <- c("ranking", "region", "rok.2010","rok.2011","rok.2012","rok.2013",
"rok.2014","rok.2015","rok.2016","rok.2017","rok.2018","rok.2019")
names(PKB_na_mieszkanca) <- c("region", "rok.2010","rok.2011","rok.2012","rok.2013",
"rok.2014","rok.2015","rok.2016","rok.2017","rok.2018","rok.2019",
"rok.2020","rok.2021")
names(Wspolczynnik_Giniego) <- c("region","rok.2009", "rok.2010","rok.2011","rok.2012","rok.2013",
"rok.2014","rok.2015","rok.2016","rok.2017","rok.2018","rok.2019",
"rok.2020")
names(Smiertelnosc_niemowlat) <- c("region","rok.2009", "rok.2010","rok.2011","rok.2012","rok.2013",
"rok.2014","rok.2015","rok.2016","rok.2017","rok.2018","rok.2019")
Wskaznik_HDI <- select(Wskaznik_HDI,c("region","rok.2012","rok.2013","rok.2014","rok.2015","rok.2016","rok.2017","rok.2018","rok.2019"))
PKB_na_mieszkanca <- select(PKB_na_mieszkanca,c("region","rok.2012","rok.2013","rok.2014","rok.2015","rok.2016","rok.2017","rok.2018","rok.2019","rok.2020","rok.2021"))
Wspolczynnik_Giniego <- select(Wspolczynnik_Giniego,c("region","rok.2012","rok.2013","rok.2014","rok.2015","rok.2016","rok.2017","rok.2018","rok.2019","rok.2020"))
Smiertelnosc_niemowlat <- select(Smiertelnosc_niemowlat,c("region","rok.2012","rok.2013","rok.2014","rok.2015","rok.2016","rok.2017","rok.2018","rok.2019"))
Wspolczynnik_Giniego <- Wspolczynnik_Giniego[-37, ]
Smiertelnosc_niemowlat <- Smiertelnosc_niemowlat[-c(38,40,42,43,44,46,47,48), ]
rownames(Smiertelnosc_niemowlat) <- 1:nrow(Smiertelnosc_niemowlat)
Ogolne_szczescie[,2:6] <- round(Ogolne_szczescie[,2:6], 3)    # zaokrąglanie wszystkich kolumn do 3 miejsc po przecinku
# Tworze dodatkowa ramke danych dla "Ogolne_szczescie" w celu usprawnienia dzialania wykresow w aplikacji
Ogolne_szczescie_2012_2019 <- Ogolne_szczescie %>%
add_column(
rok.2012 = "NA",   #dodawanie 0 kolumn
rok.2013 = "NA",
rok.2014 = "NA", .after="region")
runApp('shiny_application')
